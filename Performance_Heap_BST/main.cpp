#include <iostream>
#include <fstream>

#include "./BST/BinarySearchTree.h"
#include "./Heap/Heap.h"
#include "./Timer/Timer.cpp"

template<typename T>
void operation(int, T);

int main(int argc, char* argv[]){

	int test_set[] = {50000, 100000, 200000, 400000};
	Timer my_timer;
	int generated; // number generated by rand()
	double duration;

	std::ofstream write;
	write.open("result.txt");

	for(int s = 0; s < 4; s++){
		int n = test_set[s];
		write << "TEST FOR n = " << n << ":\n";
		for(int i = 1; i<= 5; i++){
			//-------------------------------BUILD TESTS--------------------
			srand(i); // give rand() a seed
			BinarySearchTree<int> *bst = new BinarySearchTree<int>();
			my_timer.start();
			for(int k = 1; k <= n; k++){
				// randomly generate a number from 1 to 4*test_set[i]
				generated = rand() % (4*n) + 1;
				bst->insert(generated);
			}
			duration = my_timer.stop();
			write << "BST build duration #" << i << ": " << duration << " seconds\n";
		
			Heap *my_heap = new Heap();
			srand(i);
			my_timer.start();
			for(int k = 1; k <= n; k++){
				// randomly generate a number from 1 to 4*test_set[i]
				generated = rand() % (4*n) + 1;
				my_heap->insert(generated);
			}
			duration = my_timer.stop();
			write << "Heap build duration #" << i << ": " << duration << " seconds\n";


			//-----------------------------OPERATION TESTS-----------------
			srand(i);
			my_timer.start();
			operation(n, bst);
			duration = my_timer.stop();
			write << "BST operation duration #" << i << ": " << duration << " seconds\n";

			srand(i);
			my_timer.start();
			operation(n, my_heap);	
			duration = my_timer.stop();
			write << "Heap operation duration #" << i << ": " << duration << " seconds\n";
			
			write << "\n--------------------------------------\n";

			delete bst;
			delete my_heap;
			bst = nullptr;
			my_heap = nullptr;
		}
	}//end for loop
	write.close();
	return 0;
}

template<typename T>
void operation(int iter, T struc_name){
	for(int j = 1; j <= iter/10; j++){
		double z = rand()/RAND_MAX;
		if(z >= 0 && z < 0.25)
			struc_name->deleteMin();
		else if(z >= 0.25 && z < 0.5)
			struc_name->deleteMax();
		else if(z >= 0.5 && z < 0.75){
			int y = rand() % (4*iter) + 1;
			struc_name->remove(y);
		}
		else{
			int y = rand() % (4*iter) + 1;
			struc_name->insert(y);
		}
	}

}
